{"version":3,"sources":["App.js","Main.js","Home.js","serviceWorker.js","index.js","Navbar.js","Button.js"],"names":["client","create","App","useState","isConnected","setIsConnected","window","ethereum","provider","setProvider","currentAccount","setCurrentAccount","chainId","setChainId","web3","setWeb3","balance","setBalance","contract","setContract","images","setImages","buffer","setBuffer","setUrlArr","onLogin","a","Web3","eth","getAccounts","accounts","getChainId","getBalance","net","getId","networkId","networkData","WeDream","networks","Contract","abi","address","methods","imagecount","call","imageCount","i","image","alert","length","console","log","useEffect","handleAccountsChanged","handleChainChanged","web3ChainId","on","removeListener","uploadImage","description","add","created","url","path","prev","send","from","hash","tipImageOwner","id","tipAmount","value","className","captureFile","event","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","result","preventDefault","Main","props","firstDescription","setDescription","onSubmit","type","accept","onChange","placeholder","required","map","key","author","class","src","style","maxWidth","utils","fromWei","name","onClick","toWei","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Navbar","Button","isConnecting","setIsConnecting","setIsMetamMaskInstalled","detectedProvider","error","currentProvider","onLoginhandler","request","method"],"mappings":"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","file":"static/js/main.35235f34.chunk.js","sourcesContent":["import React, { Component, useState, useEffect} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Web3 from 'web3';\nimport { Navbar } from \"./Navbar\";\nimport Main from './Main';\nimport { Home } from \"./Home\";\nimport Button from './Button'\n//Import the Contract ABI\nimport WeDream from './contracts/weDream.json'\nimport { create } from 'ipfs-http-client'\n\nimport \"./App.css\";\n\n\nconst client = create('https://ipfs.infura.io:5001/api/v0');\n\n\nconst App =  () => {\n//Declare IPFS\n  \n\n  const [isConnected, setIsConnected] = useState(false)\n  const [provider, setProvider] = useState(window.ethereum)\n  const [currentAccount, setCurrentAccount] = useState(null)\n  const [chainId, setChainId] = useState(null)\n  const [web3, setWeb3] = useState(null)\n  const [balance, setBalance] = useState(null)\n  const [contract, setContract] = useState(null)\n  const [images, setImages] = useState([])\n  const [buffer, setBuffer] = useState(null)\n  const [urlArr, setUrlArr] = useState([])\n  \n\nconst onLogin = async (provider) =>  {\n  const web3 = new Web3(provider);\n  const accounts = await web3.eth.getAccounts();\n  const chainId = await web3.eth.getChainId();\n  const balance = await web3.eth.getBalance(accounts[0])\n\n  //Getting Contract Data\n  const networkId = await web3.eth.net.getId()\n  const networkData = WeDream.networks[networkId]\n  const contract = new web3.eth.Contract(WeDream.abi, networkData.address)\n  if(networkData) { \n    setContract(contract)\n    //Get Image Count \n    const imageCount = await contract.methods.imagecount().call()\n    setImages(imageCount)\n\n    //Load Images \n    for(var i = 1; i <= imageCount; i++) { \n      const image = await contract.methods.images(i).call()\n      setImages(images => [...images, image])\n    }\n\n\n  }else { \n    window.alert(\"Contract has not been deployed to detected network\")\n  }\n\n  //Detects If No Accounts\n  if(accounts.length === 0  )  { \n    console.log(\"Please Connect To Metamask\")\n\n  }else if (accounts[0] !== currentAccount) { \n    setProvider(provider)\n    setWeb3(web3)\n    setChainId(chainId)\n    setCurrentAccount(accounts[0]);\n    setBalance(balance)\n    setIsConnected(true)\n  \n  }\n\n  // function onLogout() {\n  //   setIsConnected(false)\n  // }\n\n}\n\nuseEffect(() => { \n\n  //Handles Change Of Account\n  const handleAccountsChanged = async (accounts) => { \n    const web3Accounts = await Web3.eth.getAccounts();\n    if(accounts.length === 0) {\n      console.log(\"Please Connect to MetamMask!\")\n    }else if (accounts[0] !== currentAccount) { \n      setCurrentAccount(accounts[0])\n      setIsConnected(true)\n    }\n\n  };\n  //Handles Change of Network\n  const handleChainChanged = async (chainId) => {\n    const web3ChainId = await web3.eth.getChainId(); \n    setChainId(web3ChainId)\n  }\n\n\n  if (isConnected) {\n    provider.on(\"accountChanged\", handleAccountsChanged);\n    provider.on('chainChanged',handleChainChanged)\n  }\n  return () => { \n    if (isConnected) {\n    provider.removeListener(\"accountChanged\", handleAccountsChanged);\n    provider.removeListener('chainChanged',handleChainChanged)\n  }\n  }\n}, [isConnected])\n\n\nconst captureFile = (event) => { \n\n\n  const file = event.target.files[0]\n  const reader = new window.FileReader()\n  reader.readAsArrayBuffer(file)\n\n  reader.onloadend = () => { \n    setBuffer(Buffer(reader.result))\n    console.log('buffer', buffer)\n  }\n  event.preventDefault()\n\n}\n\nconst uploadImage = async (description) => { \n  console.log(\"Submitting to ipfs...\")\n\n  //adding file to the IPFS\n  try {\n  const created = await client.add(buffer)\n  const url = `https://ipfs.infura.io/ipfs/${created.path}`\n  setUrlArr(prev => [...prev, url])\n\n\n  contract.methods.uploadImage(created.path, description).send({from: currentAccount}).on('transactionHash', (hash) => { \n  })\n  console.log(images)\n\n}catch(error) {\n  console.log(error)\n}\n}\n\n\nconst tipImageOwner = async (id, tipAmount) => { \n  contract.methods.tipImageOwner(id).send({from:currentAccount, value: tipAmount}).on(\"transactionHash\" , (hash) => {\n  }) \n\n\n}\n\n\n\n    \n    return (\n      <div className=\"App\">\n      { !isConnected && <Button onLogin = {onLogin}  />}\n      {isConnected && (<Navbar  currentAccount = {currentAccount} balance = {balance} chainId = {chainId}\n      />)\n      }\n      {isConnected && <Main \n      images = {images}\n      captureFile = {captureFile} \n      uploadImage = {uploadImage}\n      tipImageOwner = {tipImageOwner}\n      \n      />}\n    \n      </div>\n\n    );\n    }\nexport default App;\n","import React, {useState} from 'react'\r\nimport Web3 from 'web3';\r\nimport Button from './Button';\r\n\r\n\r\n\r\n const Main = (props) => {\r\n  const [firstDescription, setDescription] = useState('')\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Share Image</h1>\r\n      <form onSubmit={(event) => { \r\n        event.preventDefault();\r\n        const description =  firstDescription\r\n        props.uploadImage(description)\r\n      }}>\r\n        <input type = \"file\" accept =\".jpg,.jpeg, .png, .bmp, .gif\" onChange={props.captureFile} />\r\n        <div className =\"form-group\">\r\n          <br></br>\r\n          <input onChange={event => setDescription(event.target.value)}\r\n            id = \"imageDescription\"\r\n            type = \"text\"\r\n            placeholder='Image Description'\r\n            required\r\n          />\r\n        </div>\r\n        <button type = \"submit\" className =\"btn\">Upload!</button>\r\n      </form>\r\n\r\n      <p>&nbsp;</p>\r\n\r\n     {props.images.map((image,key) => {\r\n       return(\r\n        <div className=\"card mb-4\" key={key} >\r\n          <div className=\"card-header\">\r\n            {/* <img\r\n              className='mr-2'\r\n              width='30'\r\n              height='30'\r\n              src={`data:image/png;base64,${new Identicon(image.author, 30).toString()}`}\r\n            /> */}\r\n            <small className=\"text-muted\">{image.author}</small>\r\n          </div>\r\n          <ul id=\"imageList\" className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item\">\r\n              <p class=\"text-center\"><img src={`https://ipfs.infura.io/ipfs/${image.hash}`} style={{ maxWidth: '420px'}}/></p>\r\n              <p>{image.description}</p>\r\n            </li>\r\n            <li key={key} className=\"list-group-item py-2\">\r\n              <small className=\"float-left mt-1 text-muted\">\r\n                TIPS: {Web3.utils.fromWei(\"1\", 'Ether')} ETH\r\n              </small>\r\n              <button\r\n                className=\"btn btn-link btn-sm float-left pt-0\"\r\n                name={image.id}\r\n                onClick={(event) => {\r\n                  let tipAmount = Web3.utils.toWei('0.1', 'Ether')\r\n                  console.log(event.target.name, tipAmount)\r\n                  props.tipImageOwner(event.target.name, tipAmount)\r\n                }}\r\n              >\r\n                TIP 0.1 ETH\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )\r\n    })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main;\r\n\r\n","import React from 'react'\r\nimport { Navbar } from './Navbar'\r\nexport const Home = (props) => {\r\n    return (\r\n        <div>\r\n            <Navbar\r\n            />\r\n           <h1> Welcome </h1> \r\n        </div>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\r\n\r\nexport const Navbar = (props) => {\r\n  return (\r\n    <div>\r\n      <nav className='nav'>\r\n        <h1 className =\"weDream\">WeDream</h1>\r\n        <ul>\r\n          <li>\r\n          {props.currentAccount}\r\n          </li>\r\n          <li>\r\n          {props.chainId}\r\n          </li>\r\n        </ul>\r\n        \r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component, useState, useEffect } from \"react\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport \"./App.css\";\r\nimport Web3 from \"web3\";\r\n\r\nconst Button = (props) => {\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [provider, setProvider] = useState(window.ethereum);\r\n  const [isMetaMaskInstalled, setIsMetamMaskInstalled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setProvider(detectedProvider());\r\n    \r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (provider) { \r\n      if (provider !== window.ethereum) { \r\n        console.error(\r\n          \"Not window.ethereum provider. Do you have multiple wallets installed?\"\r\n        )\r\n      }\r\n      setIsMetamMaskInstalled(true)\r\n  }\r\n },[provider])\r\n\r\n\r\n\r\n  const detectedProvider = () => { \r\n    let provider;\r\n    if (window.ethereum) { \r\n      provider = window.ethereum\r\n    } else if (window.web3) { \r\n      provider = window.web3.currentProvider\r\n    }else { \r\n      window.alert(\"No Eth Browser Detected\")\r\n    }\r\n    return provider\r\n  }\r\n  \r\n  const onLoginhandler = async () => { \r\n    const provider = detectedProvider();\r\n    if (provider) { \r\n      if (provider !== window.ethereum) { \r\n        console.error(\r\n          \"Not window.ethereum provider. Do you have multiple wallets installed?\"\r\n        )\r\n      }\r\n      setIsConnecting(true);\r\n      await provider.request({\r\n        method:'eth_requestAccounts'\r\n      });\r\n      setIsConnecting(false);\r\n      props.onLogin(provider)\r\n    }\r\n  };\r\n\r\n\r\n  \r\n\r\n     \r\n    return (\r\n        \r\n    <div>\r\n      <button className =\"btn\"\r\n      onClick={onLoginhandler}>\r\n       {!isConnecting && \"Connect\"}\r\n       {isConnecting && \" Loading...\"}\r\n        </button>\r\n    </div>\r\n    );\r\n    }\r\nexport default Button;\r\n"],"sourceRoot":""}